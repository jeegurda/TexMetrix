{
  "version": 3,
  "sources": ["../../src/support.ts", "../../src/types.ts", "../../src/utils.ts", "../../src/dom.ts", "../../src/common.ts", "../../src/draw.ts", "../../src/update-dom.ts", "../../src/events.ts", "../../src/index.ts"],
  "sourcesContent": ["// also see here\n// https://github.com/mdn/browser-compat-data/blob/227451e3120ee48a5f5cf2844083e65cba4df167/api/TextMetrics.json\nconst checkTMInterface = () => {\n  const props = [\n    'actualBoundingBoxAscent',\n    'actualBoundingBoxDescent',\n    'actualBoundingBoxLeft',\n    'actualBoundingBoxRight',\n\n    'fontBoundingBoxAscent',\n    'fontBoundingBoxDescent',\n\n    'emHeightAscent',\n    'emHeightDescent',\n\n    'alphabeticBaseline',\n    'hangingBaseline',\n    'ideographicBaseline',\n\n    'width',\n  ]\n\n  const supp: string[] = []\n  const nosupp: string[] = []\n\n  props.forEach((prop) =>\n    prop in TextMetrics.prototype ? supp.push(prop) : nosupp.push(prop),\n  )\n\n  console.log(\n    'Supported: %o. Not supported: %o',\n    supp.join(', '),\n    nosupp.join(', '),\n  )\n}\n\nexport { checkTMInterface }\n", "export enum Align {\n  START = 'start',\n  CENTER = 'center',\n  END = 'end',\n}\n\nexport enum Baseline {\n  ALPHABETIC = 'alphabetic',\n  BOTTOM = 'bottom',\n  HANGING = 'hanging',\n  IDEOGRAPHIC = 'ideographic',\n  MIDDLE = 'middle',\n  TOP = 'top',\n}\n\nexport interface ILineStyle {\n  width: number\n  color: string\n  display: boolean\n}\n\nexport interface IMetrix {\n  text: string\n  font: {\n    ff: string\n    fs: string\n    fsItalic: boolean\n    fsBold: boolean\n    size: number\n    lh: number\n    align: Align\n    baseline: Baseline\n  }\n  props: {\n    rw: number\n    rh: number\n\n    drawX: number\n    drawY: number\n\n    scaleMp: number\n\n    rr: number\n    style: {\n      actualBb: ILineStyle\n      fontBb: ILineStyle\n      blAlign: ILineStyle\n    }\n\n    shared: {\n      cw: number\n      ch: number\n      fm: FontMap\n      ctx: CanvasRenderingContext2D\n    }\n  }\n}\n\ninterface IFontData {\n  family: string\n  fullName: string\n  postscriptName: string\n  style: string\n  blob: () => Promise<Blob>\n}\n\nexport type FontData = Readonly<IFontData>\n\nexport type BuiltinFontData = Pick<\n  FontData,\n  'family' | 'fullName' | 'postscriptName' | 'style'\n>\n\nexport interface IFont {\n  fullName: string\n  postscriptName: string\n  style: string\n}\n\nexport type FontMap = {\n  [key: string]: IFont[] | undefined\n}\n\ndeclare global {\n  var queryLocalFonts: (() => Promise<FontData[]>) | undefined\n}\n", "import { Align, Baseline, BuiltinFontData, FontMap } from './types'\n\nconst debounce = (fn: (...args: unknown[]) => unknown, delay: number) => {\n  let t: null | number = null\n\n  return (...args: unknown[]) => {\n    typeof t === 'number' && clearTimeout(t)\n\n    t = setTimeout(() => {\n      fn(...args)\n    }, delay)\n  }\n}\n\nconst validateEnumValue = <T>(\n  value: string,\n  enumObj: typeof Align | typeof Baseline,\n): T => {\n  const values: string[] = Object.values(enumObj)\n\n  if (values.includes(value)) {\n    return value as T\n  }\n  console.warn(\n    '%o does not exist in enum %o. Using %o',\n    value,\n    enumObj,\n    values[0],\n  )\n  return values[0] as T\n}\n\nconst te: (msg?: string, err?: ErrorConstructor) => never = (\n  msg = 'Unknown',\n  err = Error,\n) => {\n  throw new err(msg)\n}\n\nconst getFontString = (\n  size: number,\n  ff: string,\n  fsBold: boolean,\n  fsItalic: boolean,\n): string => {\n  return `${fsItalic ? 'italic' : 'normal'} ${\n    fsBold ? 'bold' : 'normal'\n  } ${size}px ${ff}`\n}\n\nconst getFonts = (fd: readonly BuiltinFontData[]) => {\n  const fontMap: FontMap = fd.reduce(\n    (acc: FontMap, { family, fullName, style, postscriptName }) => {\n      let record = acc[family] || (acc[family] = [])\n\n      record.push({ fullName, style, postscriptName })\n\n      return acc\n    },\n    {},\n  )\n\n  const validateFontMap = (fm: FontMap) => {\n    Object.entries(fm).forEach(([k, v]) => {\n      if (v) {\n        if (v.length === 0) {\n          console.warn('%o font record has no variants', k)\n        }\n      } else {\n        console.warn('%o font record missing value', k)\n      }\n    })\n  }\n\n  validateFontMap(fontMap)\n\n  return fontMap\n}\n\nexport { debounce, validateEnumValue, te, getFontString, getFonts }\n", "import { te } from './utils'\n\nconst q = <T extends Element = Element>(qs: string) =>\n  document.querySelector<T>(qs) ?? te(`dom el missing (selector: ${qs})`)\n\nconst dom = {\n  textInput: q<HTMLTextAreaElement>('.text-input'),\n  ffInput: q<HTMLSelectElement>('.ff-input'),\n  fsInput: q<HTMLSelectElement>('.fs-input'),\n  fsItalicInput: q<HTMLInputElement>('.fs-italic-input'),\n  fsBoldInput: q<HTMLInputElement>('.fs-bold-input'),\n  localFontsButton: q<HTMLButtonElement>('.local-fonts-button'),\n  fontSizeInput: q<HTMLInputElement>('.font-size-input'),\n  fontSizeValue: q<HTMLSpanElement>('.font-size-value'),\n  lhInput: q<HTMLInputElement>('.line-height-input'),\n  lhValue: q<HTMLSpanElement>('.line-height-value'),\n  alignInput: q<HTMLSelectElement>('.align-input'),\n  baselineInput: q<HTMLSelectElement>('.baseline-input'),\n\n  canvas: q<HTMLCanvasElement>('.canvas canvas'),\n  canvasUi: q<HTMLDivElement>('.canvas-ui'),\n\n  rrValue: q<HTMLSpanElement>('.rr-value'),\n  dprValue: q<HTMLSpanElement>('.dpr-value'),\n  rrInput: q<HTMLInputElement>('.rr-input'),\n  canvasSizeValue: q<HTMLSpanElement>('.canvas-size-value'),\n  renderPixelValue: q<HTMLSpanElement>('.render-pixel-value'),\n  zoomValue: q<HTMLSpanElement>('.zoom-value'),\n  lineStyle: {\n    blAlign: {\n      color: q<HTMLInputElement>('.bl-align-color-input'),\n      width: q<HTMLInputElement>('.bl-align-width-input'),\n      display: q<HTMLInputElement>('.bl-align-display-input'),\n    },\n    fontBb: {\n      color: q<HTMLInputElement>('.font-color-input'),\n      width: q<HTMLInputElement>('.font-width-input'),\n      display: q<HTMLInputElement>('.font-display-input'),\n    },\n    actualBb: {\n      color: q<HTMLInputElement>('.actual-color-input'),\n      width: q<HTMLInputElement>('.actual-width-input'),\n      display: q<HTMLInputElement>('.actual-display-input'),\n    },\n  },\n} as const\n\nexport { dom }\n", "import { BuiltinFontData, FontData } from './types'\n\nexport const builtinFontData: readonly BuiltinFontData[] = [\n  {\n    postscriptName: 'serif',\n    fullName: 'Browser serif',\n    family: 'serif',\n    style: '(browser)',\n  },\n  {\n    postscriptName: 'sans-serif',\n    fullName: 'Browser sans-serif',\n    family: 'sans-serif',\n    style: '(browser)',\n  },\n  {\n    postscriptName: 'monospace',\n    fullName: 'Browser monospace',\n    family: 'monospace',\n    style: '(browser)',\n  },\n] as const\n\nexport const mlOffset = 30\nexport const mtOffset = 10\n", "import { mlOffset, mtOffset } from './common'\nimport { IMetrix } from './types'\nimport { getFontString } from './utils'\n\nconst init = (m: IMetrix) => {\n  const ctx = m.props.shared.ctx\n  const cw = ctx.canvas.clientWidth\n  const ch = ctx.canvas.clientHeight\n\n  m.props.rw = cw / m.props.scaleMp\n  m.props.rh = ch / m.props.scaleMp\n\n  ctx.canvas.width = cw * m.props.rr\n  ctx.canvas.height = ch * m.props.rr\n\n  ctx.scale(m.props.rr * m.props.scaleMp, m.props.rr * m.props.scaleMp)\n\n  m.props.shared.cw = cw\n  m.props.shared.ch = ch\n}\n\nconst drawSync = (m: IMetrix) => {\n  const {\n    rw,\n    rh,\n    shared: { ctx },\n  } = m.props\n\n  const drawText = (line: string, dx: number, dy: number) => {\n    ctx.textAlign = m.font.align\n    ctx.textBaseline = m.font.baseline\n    ctx.font = getFontString(\n      m.font.size,\n      m.font.fs,\n      m.font.fsBold,\n      m.font.fsItalic,\n    )\n    ctx.fillText(line, dx, dy)\n  }\n\n  const drawBlAlign = (idx: number, dx: number, dy: number) => {\n    const blAlignPath = new Path2D()\n    blAlignPath.moveTo(0, dy)\n    blAlignPath.lineTo(rw, dy)\n\n    // draw idx-independent lines once\n    if (idx === 0) {\n      blAlignPath.moveTo(dx, 0)\n      blAlignPath.lineTo(dx, rh)\n    }\n\n    ctx.strokeStyle = m.props.style.blAlign.color\n    ctx.lineWidth = m.props.style.blAlign.width\n    ctx.stroke(blAlignPath)\n  }\n\n  const drawFontBb = (\n    idx: number,\n    mets: TextMetrics,\n    dx: number,\n    dy: number,\n  ) => {\n    const fPath = new Path2D()\n    fPath.moveTo(0, dy - mets.fontBoundingBoxAscent)\n    fPath.lineTo(rw, dy - mets.fontBoundingBoxAscent)\n    fPath.moveTo(0, dy + mets.fontBoundingBoxDescent)\n    fPath.lineTo(rw, dy + mets.fontBoundingBoxDescent)\n\n    ctx.strokeStyle = m.props.style.fontBb.color\n    ctx.lineWidth = m.props.style.fontBb.width\n    // ctx.setLineDash([6 / M.props.scaleMp, 3 / M.props.scaleMp])\n    ctx.stroke(fPath)\n  }\n\n  const drawActualBb = (\n    idx: number,\n    mets: TextMetrics,\n    dx: number,\n    dy: number,\n  ) => {\n    // h\n    const aPath = new Path2D()\n    aPath.moveTo(0, dy - mets.actualBoundingBoxAscent)\n    aPath.lineTo(rw, dy - mets.actualBoundingBoxAscent)\n    aPath.moveTo(0, dy + mets.actualBoundingBoxDescent)\n    aPath.lineTo(rw, dy + mets.actualBoundingBoxDescent)\n\n    // v\n    // draw idx-independent Y lines once\n    if (idx === 0) {\n      aPath.moveTo(dx - mets.actualBoundingBoxLeft, 0) // this can return negative for left-aligned text\n      aPath.lineTo(dx - mets.actualBoundingBoxLeft, rh)\n    }\n    aPath.moveTo(dx + mets.actualBoundingBoxRight, 0)\n    aPath.lineTo(dx + mets.actualBoundingBoxRight, rh)\n\n    ctx.strokeStyle = m.props.style.actualBb.color\n    ctx.lineWidth = m.props.style.actualBb.width\n    ctx.stroke(aPath)\n  }\n\n  let lastMLYTop = 0\n\n  const drawMl = (idx: number, mets: TextMetrics, dx: number, dy: number) => {\n    // measuring line\n    const p = new Path2D()\n    const totalMlOffset = mlOffset / m.props.scaleMp\n    const totalMtOffset = mtOffset / m.props.scaleMp\n\n    const horMLY =\n      (idx === 0 ? dy - mets.actualBoundingBoxAscent : lastMLYTop) -\n      totalMlOffset\n    const verMLx = dx + mets.actualBoundingBoxRight + totalMlOffset\n\n    p.moveTo(dx - mets.actualBoundingBoxLeft, horMLY)\n    p.lineTo(dx + mets.actualBoundingBoxRight, horMLY)\n    p.moveTo(verMLx, dy - mets.actualBoundingBoxAscent)\n    p.lineTo(verMLx, dy + mets.actualBoundingBoxDescent)\n\n    ctx.globalAlpha = 0.5\n    ctx.strokeStyle = m.props.style.actualBb.color\n    ctx.lineWidth = m.props.style.actualBb.width\n    ctx.stroke(p)\n    ctx.globalAlpha = 1\n\n    // measuring line text\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'bottom'\n    ctx.font = getFontString(\n      m.font.size / 2,\n      m.font.fs,\n      m.font.fsBold,\n      m.font.fsItalic,\n    )\n\n    const w = mets.actualBoundingBoxLeft + mets.actualBoundingBoxRight\n    const horX = dx - mets.actualBoundingBoxLeft + w / 2\n    const horY = horMLY - totalMtOffset\n    ctx.fillText(`${w.toFixed(1)}px`, horX, horY)\n\n    const h = mets.actualBoundingBoxAscent + mets.actualBoundingBoxDescent\n    const verX = verMLx + totalMtOffset\n    const verY = dy - mets.actualBoundingBoxAscent + h / 2\n    ctx.translate(verX, verY)\n    ctx.rotate(90 / (180 / Math.PI))\n    ctx.fillText(`${h.toFixed(1)}px`, 0, 0)\n    ctx.rotate(-90 / (180 / Math.PI))\n    ctx.translate(-verX, -verY)\n\n    // top point of text above hor line\n    lastMLYTop = horY - m.font.size / 2\n  }\n\n  ctx.clearRect(0, 0, rw, rh)\n\n  const lines = m.text.split('\\n')\n\n  lines.forEach((line, idx) => {\n    const dx = m.props.drawX\n    const dy = m.props.drawY + m.font.lh * idx\n\n    drawText(line, dx, dy)\n\n    ctx.globalAlpha = 0.5\n    const mets = ctx.measureText(line)\n    m.props.style.blAlign.display && drawBlAlign(idx, dx, dy)\n    m.props.style.fontBb.display && drawFontBb(idx, mets, dx, dy)\n    m.props.style.actualBb.display && drawActualBb(idx, mets, dx, dy)\n    ctx.globalAlpha = 1\n\n    m.props.style.actualBb.display && drawMl(idx, mets, dx, dy)\n  })\n}\n\nlet af: number | null = null\n\nconst draw = (...args: Parameters<typeof drawSync>) => {\n  typeof af === 'number' && cancelAnimationFrame(af)\n  af = requestAnimationFrame(drawSync.bind(null, ...args))\n}\n\nexport { draw, init }\n", "import { builtinFontData } from './common'\nimport { dom } from './dom'\nimport { IFont, IMetrix } from './types'\nimport { getFonts, te } from './utils'\n\nconst getOptsFromArr = (arr: IFont[] | string[]): HTMLOptionElement[] => {\n  return arr.map((item) => {\n    const opt = document.createElement('option')\n    if (typeof item === 'string') {\n      opt.value = item\n      opt.innerHTML = item\n    } else {\n      opt.value = item.postscriptName\n      opt.innerHTML = item.style\n      opt.title = item.fullName\n    }\n    return opt\n  })\n}\n\nconst updateCanvasRes = (m: IMetrix) => {\n  dom.canvasSizeValue.innerHTML =\n    m.props.rw.toFixed(1) + 'x' + m.props.rh.toFixed(1)\n  dom.renderPixelValue.innerHTML =\n    (m.props.rw * m.props.rr).toFixed(1) +\n    'x' +\n    (m.props.rh * m.props.rr).toFixed(1)\n}\n\nconst updateTextInputStyle = (m: IMetrix) => {\n  dom.textInput.style.fontFamily = m.font.fs\n  dom.textInput.style.fontStyle = m.font.fsItalic ? 'italic' : 'normal'\n  dom.textInput.style.fontWeight = m.font.fsBold ? 'bold' : 'normal'\n}\n\nconst updateFf = (m: IMetrix) => {\n  dom.ffInput.innerHTML = ''\n  dom.ffInput.append(...getOptsFromArr(Object.keys(m.props.shared.fm)))\n  dom.ffInput.value = m.font.ff\n}\n\nconst updateFs = (m: IMetrix, reset: boolean = false) => {\n  const record =\n    m.props.shared.fm[m.font.ff] ?? te('Selected font-family is not in fontmap')\n\n  dom.fsInput.innerHTML = ''\n  dom.fsInput.append(...getOptsFromArr(record))\n\n  if (reset) {\n    m.font.fs = record[0].postscriptName\n  }\n\n  const availableValues = record.map(({ postscriptName }) => postscriptName)\n  if (!availableValues.includes(m.font.fs)) {\n    console.warn(\n      '%o is not in available styles list. Who tf set that?',\n      m.font.fs,\n    )\n  }\n\n  dom.fsInput.value = m.font.fs\n}\n\nconst updateDom = (M: IMetrix) => {\n  dom.textInput.value = M.text\n  updateTextInputStyle(M)\n  updateFf(M)\n  updateFs(M)\n  dom.fsBoldInput.checked = M.font.fsBold\n  dom.fsItalicInput.checked = M.font.fsItalic\n\n  dom.fontSizeInput.value = String(M.font.size)\n  dom.fontSizeValue.innerHTML = String(M.font.size)\n  dom.lhInput.value = String(M.font.lh)\n  dom.lhValue.innerHTML = String(M.font.lh)\n  dom.alignInput.value = M.font.align\n  dom.baselineInput.value = M.font.baseline\n\n  dom.rrValue.innerHTML = String(M.props.rr)\n  dom.dprValue.innerHTML = String(window.devicePixelRatio)\n  dom.rrInput.value = String(M.props.rr)\n  updateCanvasRes(M)\n  dom.zoomValue.innerHTML = String(M.props.scaleMp)\n\n  dom.lineStyle.blAlign.color.value = M.props.style.blAlign.color\n  dom.lineStyle.blAlign.width.value = String(M.props.style.blAlign.width)\n  dom.lineStyle.blAlign.display.checked = M.props.style.blAlign.display\n  dom.lineStyle.fontBb.color.value = M.props.style.fontBb.color\n  dom.lineStyle.fontBb.width.value = String(M.props.style.fontBb.width)\n  dom.lineStyle.fontBb.display.checked = M.props.style.fontBb.display\n  dom.lineStyle.actualBb.color.value = M.props.style.actualBb.color\n  dom.lineStyle.actualBb.width.value = String(M.props.style.actualBb.width)\n  dom.lineStyle.actualBb.display.checked = M.props.style.actualBb.display\n}\n\nexport { updateDom, updateCanvasRes, updateTextInputStyle, updateFf, updateFs }\n", "import { builtinFontData } from './common'\nimport { dom } from './dom'\nimport { draw, init } from './draw'\nimport { Align, Baseline, FontData, IMetrix } from './types'\nimport {\n  updateCanvasRes,\n  updateFf,\n  updateFs,\n  updateTextInputStyle,\n} from './update-dom'\nimport { getFonts, validateEnumValue } from './utils'\n\nconst addEvents = (m: IMetrix) => {\n  dom.textInput.addEventListener('input', () => {\n    m.text = dom.textInput.value\n    draw(m)\n  })\n\n  dom.ffInput.addEventListener('change', () => {\n    m.font.ff = dom.ffInput.value\n    updateFs(m, true)\n    updateTextInputStyle(m)\n    draw(m)\n  })\n\n  dom.fsInput.addEventListener('change', () => {\n    m.font.fs = dom.fsInput.value\n    updateTextInputStyle(m)\n    draw(m)\n  })\n\n  dom.fsItalicInput.addEventListener('change', () => {\n    m.font.fsItalic = dom.fsItalicInput.checked\n    updateTextInputStyle(m)\n    draw(m)\n  })\n\n  dom.fsBoldInput.addEventListener('change', () => {\n    m.font.fsBold = dom.fsBoldInput.checked\n    updateTextInputStyle(m)\n    draw(m)\n  })\n\n  dom.localFontsButton.addEventListener('click', () => {\n    const updateLocalFonts = (fd: FontData[]) => {\n      m.props.shared.fm = getFonts(builtinFontData.concat(fd))\n      updateFf(m)\n      updateFs(m)\n    }\n\n    if (window.queryLocalFonts) {\n      window\n        .queryLocalFonts()\n        .then((data: FontData[]) => {\n          if (data.length === 0) {\n            console.warn(\n              'Empty array, permission denied. Enable manually in browser',\n            )\n          } else {\n            updateLocalFonts(data)\n          }\n        })\n        .catch((reason: Error) => {\n          console.error('Local fonts query failed: %o', reason)\n        })\n    } else {\n      console.warn('Local fonts not supported')\n    }\n  })\n\n  dom.fontSizeInput.addEventListener('input', () => {\n    m.font.size = Number(dom.fontSizeInput.value)\n    dom.fontSizeValue.innerHTML = dom.fontSizeInput.value\n    draw(m)\n  })\n\n  dom.lhInput.addEventListener('input', () => {\n    m.font.lh = Number(dom.lhInput.value)\n    dom.lhValue.innerHTML = dom.lhInput.value\n    draw(m)\n  })\n\n  dom.alignInput.addEventListener('change', () => {\n    m.font.align = validateEnumValue(dom.alignInput.value, Align)\n    draw(m)\n  })\n\n  dom.baselineInput.addEventListener('change', () => {\n    m.font.baseline = validateEnumValue<Baseline>(\n      dom.baselineInput.value,\n      Baseline,\n    )\n    draw(m)\n  })\n\n  dom.rrInput.addEventListener('input', () => {\n    const value = dom.rrInput.value\n\n    dom.rrValue.innerHTML = value\n    m.props.rr = Number(value)\n    init(m) // rescaling required\n    updateCanvasRes(m)\n\n    draw(m)\n  })\n\n  window.addEventListener('resize', () => {\n    init(m)\n    updateCanvasRes(m)\n\n    draw(m)\n  })\n\n  dom.canvasUi.addEventListener('contextmenu', (ev) => {\n    ev.preventDefault()\n  })\n\n  let scaleLin = 0\n\n  dom.canvasUi.addEventListener('wheel', (ev) => {\n    ev.preventDefault()\n    if (ev.ctrlKey) {\n      scaleLin += -ev.deltaY / 100\n\n      const scaleExp = Math.pow(1.4, scaleLin)\n\n      m.props.scaleMp = scaleExp\n\n      dom.zoomValue.innerHTML = m.props.scaleMp.toFixed(2)\n\n      const xBefore = m.props.rw * (ev.offsetX / m.props.shared.cw)\n      const yBefore = m.props.rh * (ev.offsetY / m.props.shared.ch)\n\n      init(m)\n\n      const xAfter = m.props.rw * (ev.offsetX / m.props.shared.cw)\n      const yAfter = m.props.rh * (ev.offsetY / m.props.shared.ch)\n\n      m.props.drawX += xAfter - xBefore\n      m.props.drawY += yAfter - yBefore\n    } else {\n      const dx = ev.deltaX / m.props.scaleMp\n      const dy = ev.deltaY / m.props.scaleMp\n\n      m.props.drawX -= dx\n      m.props.drawY -= dy\n    }\n    draw(m)\n  })\n\n  dom.canvasUi.addEventListener('mousedown', (ev) => {\n    ev.preventDefault()\n    dom.canvasUi.classList.add('grabbing')\n\n    let downX = ev.clientX\n    let downY = ev.clientY\n    let origDrawX = m.props.drawX\n    let origDrawY = m.props.drawY\n\n    const handleMove = (ev: MouseEvent) => {\n      ev.preventDefault()\n      m.props.drawX = origDrawX + (ev.clientX - downX) / m.props.scaleMp\n      m.props.drawY = origDrawY + (ev.clientY - downY) / m.props.scaleMp\n      draw(m)\n    }\n\n    const handleUp = () => {\n      dom.canvasUi.classList.remove('grabbing')\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleUp)\n    }\n\n    window.addEventListener('mousemove', handleMove)\n    window.addEventListener('mouseup', handleUp)\n  })\n\n  const styleProps = ['blAlign', 'fontBb', 'actualBb'] as const\n\n  styleProps.forEach((prop) => {\n    dom.lineStyle[prop].color.addEventListener('input', () => {\n      m.props.style[prop].color = dom.lineStyle[prop].color.value\n      draw(m)\n    })\n    dom.lineStyle[prop].width.addEventListener('input', () => {\n      m.props.style[prop].width = Number(dom.lineStyle[prop].width.value)\n      draw(m)\n    })\n    dom.lineStyle[prop].display.addEventListener('input', () => {\n      m.props.style[prop].display = dom.lineStyle[prop].display.checked\n      draw(m)\n    })\n  })\n}\n\nexport { addEvents }\n", "import { checkTMInterface } from './support'\nimport { Align, Baseline, IMetrix } from './types'\nimport { dom } from './dom'\nimport './style.css'\nimport { addEvents } from './events'\nimport { getFonts, te } from './utils'\nimport { updateDom } from './update-dom'\nimport { builtinFontData } from './common'\nimport { draw, init } from './draw'\n\nconst ctx = dom.canvas.getContext('2d') ?? te('ctx died')\n\nconst fm = getFonts(builtinFontData)\n\nconst defFf = 'sans-serif'\nconst defFont = fm[defFf] ?? te('Default font family not found')\n\nconst metrix: IMetrix = {\n  text: 'my honest reaction \uD83D\uDE05\uD83D\uDC4C\uD83C\uDFFD',\n  font: {\n    fs: defFont[0].postscriptName,\n    fsItalic: false,\n    fsBold: false,\n    ff: defFf,\n    size: 60,\n    lh: 80,\n    align: Align.START,\n    baseline: Baseline.ALPHABETIC,\n  },\n  props: {\n    rw: 0,\n    rh: 0,\n    drawX: 100,\n    drawY: dom.canvas.clientHeight - 100,\n    scaleMp: 1,\n    rr: window.devicePixelRatio,\n    style: {\n      blAlign: { color: '#c800c8', width: 0.5, display: true },\n      fontBb: { color: '#f00000', width: 0.5, display: true },\n      actualBb: { color: '#000000', width: 0.5, display: true },\n    },\n    shared: {\n      cw: 0,\n      ch: 0,\n      fm,\n      ctx,\n    },\n  },\n}\n\ninit(metrix)\ndraw(metrix)\n\naddEvents(metrix)\nupdateDom(metrix)\n\ncheckTMInterface()\n"],
  "mappings": "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",
  "names": ["checkTMInterface", "props", "supp", "nosupp", "prop", "Align", "Baseline", "validateEnumValue", "value", "enumObj", "values", "te", "msg", "err", "getFontString", "size", "ff", "fsBold", "fsItalic", "getFonts", "fd", "fontMap", "acc", "family", "fullName", "style", "postscriptName", "fm", "k", "v", "q", "qs", "te", "dom", "builtinFontData", "mlOffset", "mtOffset", "init", "m", "ctx", "cw", "ch", "drawSync", "rw", "rh", "drawText", "line", "dx", "dy", "getFontString", "drawBlAlign", "idx", "blAlignPath", "drawFontBb", "mets", "fPath", "drawActualBb", "aPath", "lastMLYTop", "drawMl", "p", "totalMlOffset", "mlOffset", "totalMtOffset", "mtOffset", "horMLY", "verMLx", "w", "horX", "horY", "h", "verX", "verY", "af", "draw", "args", "getOptsFromArr", "arr", "item", "opt", "updateCanvasRes", "m", "dom", "updateTextInputStyle", "updateFf", "updateFs", "reset", "record", "te", "postscriptName", "updateDom", "M", "addEvents", "m", "dom", "draw", "updateFs", "updateTextInputStyle", "updateLocalFonts", "fd", "getFonts", "builtinFontData", "updateFf", "data", "reason", "validateEnumValue", "Align", "Baseline", "value", "init", "updateCanvasRes", "ev", "scaleLin", "scaleExp", "xBefore", "yBefore", "xAfter", "yAfter", "dx", "dy", "downX", "downY", "origDrawX", "origDrawY", "handleMove", "handleUp", "prop", "ctx", "dom", "te", "fm", "getFonts", "builtinFontData", "defFf", "defFont", "metrix", "init", "draw", "addEvents", "updateDom", "checkTMInterface"]
}
