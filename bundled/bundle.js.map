{
  "version": 3,
  "sources": ["../../src/support.ts", "../../src/types.ts", "../../src/utils.ts", "../../src/dom.ts", "../../src/events.ts", "../../src/index.ts"],
  "sourcesContent": ["// also see here\n// https://github.com/mdn/browser-compat-data/blob/227451e3120ee48a5f5cf2844083e65cba4df167/api/TextMetrics.json\nconst checkTMInterface = () => {\n  const props = [\n    'actualBoundingBoxAscent',\n    'actualBoundingBoxDescent',\n    'actualBoundingBoxLeft',\n    'actualBoundingBoxRight',\n\n    'fontBoundingBoxAscent',\n    'fontBoundingBoxDescent',\n\n    'emHeightAscent',\n    'emHeightDescent',\n\n    'alphabeticBaseline',\n    'hangingBaseline',\n    'ideographicBaseline',\n\n    'width',\n  ]\n\n  const supp: string[] = []\n  const nosupp: string[] = []\n\n  props.forEach((prop) =>\n    prop in TextMetrics.prototype ? supp.push(prop) : nosupp.push(prop),\n  )\n\n  console.log(\n    'Supported: %o. Not supported: %o',\n    supp.join(', '),\n    nosupp.join(', '),\n  )\n}\n\nexport { checkTMInterface }\n", "export enum Align {\n  START = 'start',\n  CENTER = 'center',\n  END = 'end',\n}\n\nexport enum Baseline {\n  ALPHABETIC = 'alphabetic',\n  BOTTOM = 'bottom',\n  HANGING = 'hanging',\n  IDEOGRAPHIC = 'ideographic',\n  MIDDLE = 'middle',\n  TOP = 'top',\n}\n\nexport type LineStyle = {\n  width: number\n  color: string\n}\n\nexport type Metrix = {\n  props: {\n    rw: number\n    rh: number\n\n    drawX: number\n    drawY: number\n\n    scaleMp: number\n\n    text: string\n    fs: number\n    align: Align\n    baseline: Baseline\n    rr: number\n    lines: {\n      actualBb: LineStyle\n      fontBb: LineStyle\n      blAlign: LineStyle\n    }\n\n    rest?: any // TEMP: remove\n  }\n  draw: () => void\n  init: () => void\n}\n\ndeclare global {\n  // TEMP: remove\n  interface Window {\n    M: Metrix\n  }\n}\n", "import { Align, Baseline } from './types'\n\nconst debounce = (fn: (...args: unknown[]) => unknown, delay: number) => {\n  let t: null | number = null\n\n  return (...args: unknown[]) => {\n    typeof t === 'number' && clearTimeout(t)\n\n    t = setTimeout(() => {\n      fn(...args)\n    }, delay)\n  }\n}\n\nconst validateSelectValue = <T>(\n  value: string,\n  enumObj: typeof Align | typeof Baseline,\n): T => {\n  const values: string[] = Object.values(enumObj)\n  // const valuesStr: string[] = values\n  if (values.includes(value)) {\n    return value as T\n  }\n  console.warn(\n    '%o does not exist in enum %o. Using %o',\n    value,\n    enumObj,\n    values[0],\n  )\n  return values[0] as T\n}\n\nconst te: (msg?: string, err?: ErrorConstructor) => never = (\n  msg = 'Unknown',\n  err = Error,\n) => {\n  throw new err(msg)\n}\n\nexport { debounce, validateSelectValue, te }\n", "import { te } from './utils'\n\nconst q = <T extends Element>(qs: string) =>\n  document.querySelector<T>(qs) ?? te(`dom el missing (selector: ${qs})`)\n\nconst dom = {\n  textInput: q<HTMLTextAreaElement>('.text-input'),\n  fontSizeInput: q<HTMLInputElement>('.font-size-input'),\n  alignInput: q<HTMLSelectElement>('.align-input'),\n  baselineInput: q<HTMLSelectElement>('.baseline-input'),\n\n  canvas: q<HTMLCanvasElement>('.canvas canvas'),\n  canvasUi: q<HTMLDivElement>('.canvas-ui'),\n\n  rrValue: q<HTMLSpanElement>('.rr-value'),\n  dprValue: q<HTMLSpanElement>('.dpr-value'),\n  rrInput: q<HTMLInputElement>('.rr-input'),\n  canvasSizeValue: q<HTMLSpanElement>('.canvas-size-value'),\n  renderPixelValue: q<HTMLSpanElement>('.render-pixel-value'),\n  zoomValue: q<HTMLSpanElement>('.zoom-value'),\n  lineInputs: {\n    blAlign: {\n      color: q<HTMLInputElement>('.bl-align-color-input'),\n      width: q<HTMLInputElement>('.bl-align-width-input'),\n    },\n    fontBb: {\n      color: q<HTMLInputElement>('.font-color-input'),\n      width: q<HTMLInputElement>('.font-width-input'),\n    },\n    actualBb: {\n      color: q<HTMLInputElement>('.actual-color-input'),\n      width: q<HTMLInputElement>('.actual-width-input'),\n    },\n  },\n} as const\n\nexport { dom }\n", "import { dom } from './dom'\nimport { Align, Baseline, Metrix } from './types'\nimport { validateSelectValue } from './utils'\n\nconst addEvents = (M: Metrix) => {\n  dom.textInput.addEventListener('input', (ev) => {\n    M.props.text = dom.textInput.value\n    M.draw()\n  })\n\n  dom.fontSizeInput.addEventListener('input', (ev) => {\n    M.props.fs = Number(dom.fontSizeInput.value)\n    M.draw()\n  })\n\n  dom.alignInput.addEventListener('change', (ev) => {\n    M.props.align = validateSelectValue<Align>(dom.alignInput.value, Align)\n    M.draw()\n  })\n\n  dom.baselineInput.addEventListener('change', (ev) => {\n    M.props.baseline = validateSelectValue<Baseline>(\n      dom.baselineInput.value,\n      Baseline,\n    )\n    M.draw()\n  })\n\n  dom.rrInput.addEventListener('input', (ev) => {\n    const value = dom.rrInput.value\n\n    dom.rrValue.innerHTML = value\n    M.props.rr = Number(value)\n    M.init() // rescaling required\n    dom.canvasSizeValue.innerHTML = `${M.props.rw.toFixed(\n      1,\n    )}x${M.props.rh.toFixed(1)}`\n\n    M.draw()\n  })\n\n  window.addEventListener('resize', () => {\n    M.init()\n    dom.canvasSizeValue.innerHTML = `${M.props.rw.toFixed(\n      1,\n    )}x${M.props.rh.toFixed(1)}`\n\n    M.draw()\n  })\n\n  dom.canvasUi.addEventListener('contextmenu', (ev) => {\n    ev.preventDefault()\n  })\n\n  let scaleLin = 0\n\n  dom.canvasUi.addEventListener('wheel', (ev) => {\n    ev.preventDefault()\n    if (ev.ctrlKey) {\n      scaleLin += -ev.deltaY / 100\n\n      let scaleD = M.props.scaleMp\n\n      const scaleExp = Math.pow(1.4, scaleLin)\n\n      M.props.scaleMp = scaleExp\n\n      dom.zoomValue.innerHTML = M.props.scaleMp.toFixed(2)\n\n      scaleD -= M.props.scaleMp\n\n      const xBefore = M.props.rw * (ev.offsetX / M.props.rest.cw)\n      const yBefore = M.props.rh * (ev.offsetY / M.props.rest.ch)\n\n      M.init()\n\n      const xAfter = M.props.rw * (ev.offsetX / M.props.rest.cw)\n      const yAfter = M.props.rh * (ev.offsetY / M.props.rest.ch)\n\n      M.props.drawX += xAfter - xBefore\n      M.props.drawY += yAfter - yBefore\n    } else {\n      const dx = ev.deltaX / M.props.scaleMp\n      const dy = ev.deltaY / M.props.scaleMp\n\n      M.props.drawX -= dx\n      M.props.drawY -= dy\n    }\n    M.draw()\n  })\n\n  dom.canvasUi.addEventListener('mousedown', (ev) => {\n    ev.preventDefault()\n    dom.canvasUi.classList.add('grabbing')\n\n    let downX = ev.clientX\n    let downY = ev.clientY\n    let origDrawX = M.props.drawX\n    let origDrawY = M.props.drawY\n\n    const handleMove = (ev: MouseEvent) => {\n      ev.preventDefault()\n      M.props.drawX = origDrawX + (ev.clientX - downX) / M.props.scaleMp\n      M.props.drawY = origDrawY + (ev.clientY - downY) / M.props.scaleMp\n      M.draw()\n    }\n\n    const handleUp = (ev: MouseEvent) => {\n      dom.canvasUi.classList.remove('grabbing')\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleUp)\n    }\n\n    window.addEventListener('mousemove', handleMove)\n    window.addEventListener('mouseup', handleUp)\n  })\n\n  dom.lineInputs.blAlign.color.addEventListener('input', () => {\n    M.props.lines.blAlign.color = dom.lineInputs.blAlign.color.value\n    M.draw()\n  })\n  dom.lineInputs.blAlign.width.addEventListener('input', () => {\n    M.props.lines.blAlign.width = Number(dom.lineInputs.blAlign.width.value)\n    M.draw()\n  })\n  dom.lineInputs.fontBb.color.addEventListener('input', () => {\n    M.props.lines.fontBb.color = dom.lineInputs.fontBb.color.value\n    M.draw()\n  })\n  dom.lineInputs.fontBb.color.addEventListener('input', () => {\n    M.props.lines.fontBb.width = Number(dom.lineInputs.fontBb.width.value)\n    M.draw()\n  })\n  dom.lineInputs.actualBb.color.addEventListener('input', () => {\n    M.props.lines.actualBb.color = dom.lineInputs.actualBb.color.value\n    M.draw()\n  })\n  dom.lineInputs.actualBb.color.addEventListener('input', () => {\n    M.props.lines.actualBb.width = Number(dom.lineInputs.actualBb.width.value)\n    M.draw()\n  })\n}\n\nexport { addEvents }\n", "import { checkTMInterface } from './support'\nimport { Align, Baseline, Metrix } from './types'\nimport { dom } from './dom'\nimport './style.css'\nimport { addEvents } from './events'\nimport { te } from './utils'\n\nconst ff = 'sans-serif' // TODO: move to input\n\nconst ctx = dom.canvas.getContext('2d') ?? te('ctx died')\n\nconst M: Metrix = {\n  props: {\n    rw: 0,\n    rh: 0,\n\n    drawX: 100,\n    drawY: dom.canvas.clientHeight - 100,\n\n    scaleMp: 1,\n\n    text: 'my honest reaction \uD83D\uDE05\uD83D\uDC4C\uD83C\uDFFD',\n    fs: 60,\n    align: Align.START,\n    baseline: Baseline.ALPHABETIC,\n    rr: window.devicePixelRatio,\n    lines: {\n      blAlign: { color: '#c800c8', width: 0.5 },\n      fontBb: { color: '#f00000', width: 0.5 },\n      actualBb: { color: '#000000', width: 0.5 },\n    },\n\n    rest: {},\n  },\n  draw: () => {},\n  init: () => {},\n}\n\nconst init = () => {\n  const cw = ctx.canvas.clientWidth\n  const ch = ctx.canvas.clientHeight\n\n  M.props.rw = cw / M.props.scaleMp\n  M.props.rh = ch / M.props.scaleMp\n\n  ctx.canvas.width = cw * M.props.rr\n  ctx.canvas.height = ch * M.props.rr\n\n  ctx.scale(M.props.rr * M.props.scaleMp, M.props.rr * M.props.scaleMp)\n\n  M.props.rest.cw = cw\n  M.props.rest.ch = ch\n}\n\nlet af: number | null = null\n\nconst draw = () => {\n  typeof af === 'number' && cancelAnimationFrame(af)\n  af = requestAnimationFrame(drawSync)\n}\n\nconst drawSync = () => {\n  const { rw, rh, drawX: dx, drawY: dy } = M.props\n\n  ctx.textAlign = M.props.align\n  ctx.textBaseline = M.props.baseline\n\n  ctx.clearRect(0, 0, rw, rh)\n  ctx.font = `${M.props.fs}px ${ff}`\n\n  const metrics = ctx.measureText(M.props.text)\n\n  ctx.fillText(M.props.text, dx, dy)\n\n  ctx.globalAlpha = 0.5\n\n  // baseline\n  const blAlignPath = new Path2D()\n  blAlignPath.moveTo(0, dy)\n  blAlignPath.lineTo(rw, dy)\n\n  // align\n  blAlignPath.moveTo(dx, 0)\n  blAlignPath.lineTo(dx, rh)\n\n  ctx.strokeStyle = M.props.lines.blAlign.color\n  ctx.lineWidth = M.props.lines.blAlign.width\n  ctx.stroke(blAlignPath)\n\n  // font bb\n  const fPath = new Path2D()\n  fPath.moveTo(0, dy - metrics.fontBoundingBoxAscent)\n  fPath.lineTo(rw, dy - metrics.fontBoundingBoxAscent)\n  fPath.moveTo(0, dy + metrics.fontBoundingBoxDescent)\n  fPath.lineTo(rw, dy + metrics.fontBoundingBoxDescent)\n\n  ctx.strokeStyle = M.props.lines.fontBb.color\n  ctx.lineWidth = M.props.lines.fontBb.width\n  ctx.stroke(fPath)\n\n  // h actual bb\n  const bbPath = new Path2D()\n  bbPath.moveTo(0, dy - metrics.actualBoundingBoxAscent)\n  bbPath.lineTo(rw, dy - metrics.actualBoundingBoxAscent)\n  bbPath.moveTo(0, dy + metrics.actualBoundingBoxDescent)\n  bbPath.lineTo(rw, dy + metrics.actualBoundingBoxDescent)\n\n  // v actual bb\n  bbPath.moveTo(dx - metrics.actualBoundingBoxLeft, 0) // this can return negative for left-aligned text\n  bbPath.lineTo(dx - metrics.actualBoundingBoxLeft, rh)\n  bbPath.moveTo(dx + metrics.actualBoundingBoxRight, 0)\n  bbPath.lineTo(dx + metrics.actualBoundingBoxRight, rh)\n\n  ctx.strokeStyle = M.props.lines.actualBb.color\n  ctx.lineWidth = M.props.lines.actualBb.width\n  ctx.stroke(bbPath)\n\n  ctx.globalAlpha = 1\n\n  // measuring lines\n  const m = new Path2D()\n  const horMLY =\n    dy - metrics.actualBoundingBoxAscent - (30 / M.props.scaleMp) * 2\n  const verMLx =\n    dx + metrics.actualBoundingBoxRight + (30 / M.props.scaleMp) * 2\n\n  m.moveTo(dx - metrics.actualBoundingBoxLeft, horMLY)\n  m.lineTo(dx + metrics.actualBoundingBoxRight, horMLY)\n  m.moveTo(verMLx, dy - metrics.actualBoundingBoxAscent)\n  m.lineTo(verMLx, dy + metrics.actualBoundingBoxDescent)\n\n  ctx.strokeStyle = M.props.lines.actualBb.color\n  ctx.lineWidth = M.props.lines.actualBb.width\n  ctx.stroke(m)\n\n  ctx.textAlign = 'center'\n  ctx.textBaseline = 'bottom'\n\n  ctx.font = `${M.props.fs / 2}px sans-serif`\n\n  const w = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight\n  const horX = dx - metrics.actualBoundingBoxLeft + w / 2\n  const horY = horMLY - (10 / M.props.scaleMp) * 2\n  ctx.fillText(`${w.toFixed(1)}px`, horX, horY)\n\n  const h = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n  const verX = verMLx + (10 / M.props.scaleMp) * 2\n  const verY = dy - metrics.actualBoundingBoxAscent + h / 2\n  ctx.translate(verX, verY)\n  ctx.rotate(90 / (180 / Math.PI))\n  ctx.fillText(`${h.toFixed(1)}px`, 0, 0)\n  ctx.rotate(-90 / (180 / Math.PI))\n  ctx.translate(-verX, -verY)\n}\n\nM.draw = draw\nM.init = init\n\nconst initInputValues = () => {\n  dom.textInput.value = M.props.text\n  dom.rrInput.value = String(M.props.rr)\n\n  dom.rrValue.innerHTML = String(M.props.rr)\n  dom.dprValue.innerHTML = String(window.devicePixelRatio)\n  dom.canvasSizeValue.innerHTML = `${M.props.rw.toFixed(\n    1,\n  )}x${M.props.rh.toFixed(1)}`\n  dom.renderPixelValue.innerHTML = `${(M.props.rw * M.props.rr).toFixed(1)}x${(\n    M.props.rh * M.props.rr\n  ).toFixed(1)}`\n  dom.zoomValue.innerHTML = String(M.props.scaleMp)\n\n  dom.lineInputs.blAlign.color.value = M.props.lines.blAlign.color\n  dom.lineInputs.blAlign.width.value = String(M.props.lines.blAlign.width)\n  dom.lineInputs.fontBb.color.value = M.props.lines.fontBb.color\n  dom.lineInputs.fontBb.width.value = String(M.props.lines.fontBb.width)\n  dom.lineInputs.actualBb.color.value = M.props.lines.actualBb.color\n  dom.lineInputs.actualBb.width.value = String(M.props.lines.actualBb.width)\n}\n\naddEvents(M)\n\ninit()\ndraw()\ninitInputValues()\n\ncheckTMInterface()\n\nwindow.M = M\n"],
  "mappings": "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",
  "names": ["checkTMInterface", "props", "supp", "nosupp", "prop", "Align", "Baseline", "validateSelectValue", "value", "enumObj", "values", "te", "msg", "err", "q", "qs", "te", "dom", "addEvents", "M", "dom", "ev", "validateSelectValue", "Align", "Baseline", "value", "scaleLin", "scaleD", "scaleExp", "xBefore", "yBefore", "xAfter", "yAfter", "dx", "dy", "downX", "downY", "origDrawX", "origDrawY", "handleMove", "handleUp", "ff", "ctx", "dom", "te", "M", "init", "cw", "ch", "af", "draw", "drawSync", "rw", "rh", "dx", "dy", "metrics", "blAlignPath", "fPath", "bbPath", "m", "horMLY", "verMLx", "w", "horX", "horY", "h", "verX", "verY", "initInputValues", "addEvents", "checkTMInterface"]
}
