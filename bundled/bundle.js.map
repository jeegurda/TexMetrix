{
  "version": 3,
  "sources": ["../../src/support.ts", "../../src/types.ts", "../../src/utils.ts", "../../src/dom.ts", "../../src/common.ts", "../../src/update-dom.ts", "../../src/events.ts", "../../src/index.ts"],
  "sourcesContent": ["// also see here\n// https://github.com/mdn/browser-compat-data/blob/227451e3120ee48a5f5cf2844083e65cba4df167/api/TextMetrics.json\nconst checkTMInterface = () => {\n  const props = [\n    'actualBoundingBoxAscent',\n    'actualBoundingBoxDescent',\n    'actualBoundingBoxLeft',\n    'actualBoundingBoxRight',\n\n    'fontBoundingBoxAscent',\n    'fontBoundingBoxDescent',\n\n    'emHeightAscent',\n    'emHeightDescent',\n\n    'alphabeticBaseline',\n    'hangingBaseline',\n    'ideographicBaseline',\n\n    'width',\n  ]\n\n  const supp: string[] = []\n  const nosupp: string[] = []\n\n  props.forEach((prop) =>\n    prop in TextMetrics.prototype ? supp.push(prop) : nosupp.push(prop),\n  )\n\n  console.log(\n    'Supported: %o. Not supported: %o',\n    supp.join(', '),\n    nosupp.join(', '),\n  )\n}\n\nexport { checkTMInterface }\n", "export enum Align {\n  START = 'start',\n  CENTER = 'center',\n  END = 'end',\n}\n\nexport enum Baseline {\n  ALPHABETIC = 'alphabetic',\n  BOTTOM = 'bottom',\n  HANGING = 'hanging',\n  IDEOGRAPHIC = 'ideographic',\n  MIDDLE = 'middle',\n  TOP = 'top',\n}\n\nexport type LineStyle = {\n  width: number\n  color: string\n  display: boolean\n}\n\nexport type Metrix = {\n  text: string\n  font: {\n    ff: string\n    fs: string\n    fsItalic: boolean\n    fsBold: boolean\n    size: number\n    lh: number\n    align: Align\n    baseline: Baseline\n  }\n  props: {\n    rw: number\n    rh: number\n\n    drawX: number\n    drawY: number\n\n    scaleMp: number\n\n    rr: number\n    style: {\n      actualBb: LineStyle\n      fontBb: LineStyle\n      blAlign: LineStyle\n    }\n\n    shared: {\n      cw: number\n      ch: number\n      fm: FontMap\n    }\n  }\n  draw: () => void\n  init: () => void\n}\n\nexport type FontData = Readonly<{\n  family: string\n  fullName: string\n  postscriptName: string\n  style: string\n  blob: () => Promise<Blob>\n}>\n\nexport type BuiltinFontData = Pick<\n  FontData,\n  'family' | 'fullName' | 'postscriptName' | 'style'\n>\n\nexport type FontRecord = {\n  fullName: string\n  postscriptName: string\n  style: string\n}\n\nexport type FontMap = {\n  [key: string]: FontRecord[] | undefined\n}\n\ndeclare global {\n  var queryLocalFonts: (() => Promise<FontData[]>) | undefined\n}\n", "import { Align, Baseline, BuiltinFontData, FontMap } from './types'\n\nconst debounce = (fn: (...args: unknown[]) => unknown, delay: number) => {\n  let t: null | number = null\n\n  return (...args: unknown[]) => {\n    typeof t === 'number' && clearTimeout(t)\n\n    t = setTimeout(() => {\n      fn(...args)\n    }, delay)\n  }\n}\n\nconst validateEnumValue = <T>(\n  value: string,\n  enumObj: typeof Align | typeof Baseline,\n): T => {\n  const values: string[] = Object.values(enumObj)\n\n  if (values.includes(value)) {\n    return value as T\n  }\n  console.warn(\n    '%o does not exist in enum %o. Using %o',\n    value,\n    enumObj,\n    values[0],\n  )\n  return values[0] as T\n}\n\nconst te: (msg?: string, err?: ErrorConstructor) => never = (\n  msg = 'Unknown',\n  err = Error,\n) => {\n  throw new err(msg)\n}\n\nconst getFontString = (\n  size: number,\n  ff: string,\n  fsBold: boolean,\n  fsItalic: boolean,\n): string => {\n  return `${fsItalic ? 'italic' : 'normal'} ${\n    fsBold ? 'bold' : 'normal'\n  } ${size}px ${ff}`\n}\n\nconst getFonts = (fd: readonly BuiltinFontData[]) => {\n  const fontMap: FontMap = fd.reduce(\n    (acc: FontMap, { family, fullName, style, postscriptName }) => {\n      let record = acc[family] || (acc[family] = [])\n\n      record.push({ fullName, style, postscriptName })\n\n      return acc\n    },\n    {},\n  )\n\n  const validateFontMap = (fm: FontMap) => {\n    Object.entries(fm).forEach(([k, v]) => {\n      if (v) {\n        if (v.length === 0) {\n          console.warn('%o font record has no variants', k)\n        }\n      } else {\n        console.warn('%o font record missing value', k)\n      }\n    })\n  }\n\n  validateFontMap(fontMap)\n\n  return fontMap\n}\n\nexport { debounce, validateEnumValue, te, getFontString, getFonts }\n", "import { te } from './utils'\n\nconst q = <T extends Element = Element>(qs: string) =>\n  document.querySelector<T>(qs) ?? te(`dom el missing (selector: ${qs})`)\n\nconst dom = {\n  textInput: q<HTMLTextAreaElement>('.text-input'),\n  ffInput: q<HTMLSelectElement>('.ff-input'),\n  fsInput: q<HTMLSelectElement>('.fs-input'),\n  fsItalicInput: q<HTMLInputElement>('.fs-italic-input'),\n  fsBoldInput: q<HTMLInputElement>('.fs-bold-input'),\n  localFontsButton: q<HTMLButtonElement>('.local-fonts-button'),\n  fontSizeInput: q<HTMLInputElement>('.font-size-input'),\n  fontSizeValue: q<HTMLSpanElement>('.font-size-value'),\n  lhInput: q<HTMLInputElement>('.line-height-input'),\n  lhValue: q<HTMLSpanElement>('.line-height-value'),\n  alignInput: q<HTMLSelectElement>('.align-input'),\n  baselineInput: q<HTMLSelectElement>('.baseline-input'),\n\n  canvas: q<HTMLCanvasElement>('.canvas canvas'),\n  canvasUi: q<HTMLDivElement>('.canvas-ui'),\n\n  rrValue: q<HTMLSpanElement>('.rr-value'),\n  dprValue: q<HTMLSpanElement>('.dpr-value'),\n  rrInput: q<HTMLInputElement>('.rr-input'),\n  canvasSizeValue: q<HTMLSpanElement>('.canvas-size-value'),\n  renderPixelValue: q<HTMLSpanElement>('.render-pixel-value'),\n  zoomValue: q<HTMLSpanElement>('.zoom-value'),\n  lineStyle: {\n    blAlign: {\n      color: q<HTMLInputElement>('.bl-align-color-input'),\n      width: q<HTMLInputElement>('.bl-align-width-input'),\n      display: q<HTMLInputElement>('.bl-align-display-input'),\n    },\n    fontBb: {\n      color: q<HTMLInputElement>('.font-color-input'),\n      width: q<HTMLInputElement>('.font-width-input'),\n      display: q<HTMLInputElement>('.font-display-input'),\n    },\n    actualBb: {\n      color: q<HTMLInputElement>('.actual-color-input'),\n      width: q<HTMLInputElement>('.actual-width-input'),\n      display: q<HTMLInputElement>('.actual-display-input'),\n    },\n  },\n} as const\n\nexport { dom }\n", "import { BuiltinFontData, FontData } from './types'\n\nexport const builtinFontData: readonly BuiltinFontData[] = [\n  {\n    postscriptName: 'serif',\n    fullName: 'Browser serif',\n    family: 'serif',\n    style: '(browser)',\n  },\n  {\n    postscriptName: 'sans-serif',\n    fullName: 'Browser sans-serif',\n    family: 'sans-serif',\n    style: '(browser)',\n  },\n  {\n    postscriptName: 'monospace',\n    fullName: 'Browser monospace',\n    family: 'monospace',\n    style: '(browser)',\n  },\n] as const\n", "import { builtinFontData } from './common'\nimport { dom } from './dom'\nimport { FontRecord, Metrix } from './types'\nimport { getFonts, te } from './utils'\n\nconst getOptsFromArr = (arr: FontRecord[] | string[]): HTMLOptionElement[] => {\n  return arr.map((item) => {\n    const opt = document.createElement('option')\n    if (typeof item === 'string') {\n      opt.value = item\n      opt.innerHTML = item\n    } else {\n      opt.value = item.postscriptName\n      opt.innerHTML = item.style\n      opt.title = item.fullName\n    }\n    return opt\n  })\n}\n\nconst updateCanvasRes = (M: Metrix) => {\n  dom.canvasSizeValue.innerHTML =\n    M.props.rw.toFixed(1) + 'x' + M.props.rh.toFixed(1)\n  dom.renderPixelValue.innerHTML =\n    (M.props.rw * M.props.rr).toFixed(1) +\n    'x' +\n    (M.props.rh * M.props.rr).toFixed(1)\n}\n\nconst updateTextInputStyle = (M: Metrix) => {\n  dom.textInput.style.fontFamily = M.font.fs\n  dom.textInput.style.fontStyle = M.font.fsItalic ? 'italic' : 'normal'\n  dom.textInput.style.fontWeight = M.font.fsBold ? 'bold' : 'normal'\n}\n\nconst updateFf = (M: Metrix) => {\n  dom.ffInput.innerHTML = ''\n  dom.ffInput.append(...getOptsFromArr(Object.keys(M.props.shared.fm)))\n  dom.ffInput.value = M.font.ff\n}\n\nconst updateFs = (M: Metrix, reset: boolean = false) => {\n  const record =\n    M.props.shared.fm[M.font.ff] ?? te('Selected font-family is not in fontmap')\n\n  dom.fsInput.innerHTML = ''\n  dom.fsInput.append(...getOptsFromArr(record))\n\n  if (reset) {\n    M.font.fs = record[0].postscriptName\n  }\n\n  const availableValues = record.map(({ postscriptName }) => postscriptName)\n  if (!availableValues.includes(M.font.fs)) {\n    console.warn(\n      '%o is not in available styles list. Who tf set that?',\n      M.font.fs,\n    )\n  }\n\n  dom.fsInput.value = M.font.fs\n}\n\nconst updateDom = (M: Metrix) => {\n  dom.textInput.value = M.text\n  updateTextInputStyle(M)\n  updateFf(M)\n  updateFs(M)\n  dom.fsBoldInput.checked = M.font.fsBold\n  dom.fsItalicInput.checked = M.font.fsItalic\n\n  dom.fontSizeInput.value = String(M.font.size)\n  dom.fontSizeValue.innerHTML = String(M.font.size)\n  dom.lhInput.value = String(M.font.lh)\n  dom.lhValue.innerHTML = String(M.font.lh)\n  dom.alignInput.value = M.font.align\n  dom.baselineInput.value = M.font.baseline\n\n  dom.rrValue.innerHTML = String(M.props.rr)\n  dom.dprValue.innerHTML = String(window.devicePixelRatio)\n  dom.rrInput.value = String(M.props.rr)\n  updateCanvasRes(M)\n  dom.zoomValue.innerHTML = String(M.props.scaleMp)\n\n  dom.lineStyle.blAlign.color.value = M.props.style.blAlign.color\n  dom.lineStyle.blAlign.width.value = String(M.props.style.blAlign.width)\n  dom.lineStyle.blAlign.display.checked = M.props.style.blAlign.display\n  dom.lineStyle.fontBb.color.value = M.props.style.fontBb.color\n  dom.lineStyle.fontBb.width.value = String(M.props.style.fontBb.width)\n  dom.lineStyle.fontBb.display.checked = M.props.style.fontBb.display\n  dom.lineStyle.actualBb.color.value = M.props.style.actualBb.color\n  dom.lineStyle.actualBb.width.value = String(M.props.style.actualBb.width)\n  dom.lineStyle.actualBb.display.checked = M.props.style.actualBb.display\n}\n\nexport { updateDom, updateCanvasRes, updateTextInputStyle, updateFf, updateFs }\n", "import { builtinFontData } from './common'\nimport { dom } from './dom'\nimport { Align, Baseline, FontData, Metrix } from './types'\nimport {\n  updateCanvasRes,\n  updateFf,\n  updateFs,\n  updateTextInputStyle,\n} from './update-dom'\nimport { getFonts, validateEnumValue } from './utils'\n\nconst addEvents = (M: Metrix) => {\n  dom.textInput.addEventListener('input', () => {\n    M.text = dom.textInput.value\n    M.draw()\n  })\n\n  dom.ffInput.addEventListener('change', () => {\n    M.font.ff = dom.ffInput.value\n    updateFs(M, true)\n    updateTextInputStyle(M)\n    M.draw()\n  })\n\n  dom.fsInput.addEventListener('change', () => {\n    M.font.fs = dom.fsInput.value\n    updateTextInputStyle(M)\n    M.draw()\n  })\n\n  dom.fsItalicInput.addEventListener('change', () => {\n    M.font.fsItalic = dom.fsItalicInput.checked\n    updateTextInputStyle(M)\n    M.draw()\n  })\n\n  dom.fsBoldInput.addEventListener('change', () => {\n    M.font.fsBold = dom.fsBoldInput.checked\n    updateTextInputStyle(M)\n    M.draw()\n  })\n\n  dom.localFontsButton.addEventListener('click', () => {\n    const updateLocalFonts = (fd: FontData[]) => {\n      M.props.shared.fm = getFonts(builtinFontData.concat(fd))\n      updateFf(M)\n      updateFs(M)\n    }\n\n    if (window.queryLocalFonts) {\n      window\n        .queryLocalFonts()\n        .then((data: FontData[]) => {\n          if (data.length === 0) {\n            console.warn(\n              'Empty array, permission denied. Enable manually in browser',\n            )\n          } else {\n            updateLocalFonts(data)\n          }\n        })\n        .catch((reason: Error) => {\n          console.error('Local fonts query failed: %o', reason)\n        })\n    } else {\n      console.warn('Local fonts not supported')\n    }\n  })\n\n  dom.fontSizeInput.addEventListener('input', () => {\n    M.font.size = Number(dom.fontSizeInput.value)\n    dom.fontSizeValue.innerHTML = dom.fontSizeInput.value\n    M.draw()\n  })\n\n  dom.lhInput.addEventListener('input', () => {\n    M.font.lh = Number(dom.lhInput.value)\n    dom.lhValue.innerHTML = dom.lhInput.value\n    M.draw()\n  })\n\n  dom.alignInput.addEventListener('change', () => {\n    M.font.align = validateEnumValue(dom.alignInput.value, Align)\n    M.draw()\n  })\n\n  dom.baselineInput.addEventListener('change', () => {\n    M.font.baseline = validateEnumValue<Baseline>(\n      dom.baselineInput.value,\n      Baseline,\n    )\n    M.draw()\n  })\n\n  dom.rrInput.addEventListener('input', () => {\n    const value = dom.rrInput.value\n\n    dom.rrValue.innerHTML = value\n    M.props.rr = Number(value)\n    M.init() // rescaling required\n    updateCanvasRes(M)\n\n    M.draw()\n  })\n\n  window.addEventListener('resize', () => {\n    M.init()\n    updateCanvasRes(M)\n\n    M.draw()\n  })\n\n  dom.canvasUi.addEventListener('contextmenu', (ev) => {\n    ev.preventDefault()\n  })\n\n  let scaleLin = 0\n\n  dom.canvasUi.addEventListener('wheel', (ev) => {\n    ev.preventDefault()\n    if (ev.ctrlKey) {\n      scaleLin += -ev.deltaY / 100\n\n      const scaleExp = Math.pow(1.4, scaleLin)\n\n      M.props.scaleMp = scaleExp\n\n      dom.zoomValue.innerHTML = M.props.scaleMp.toFixed(2)\n\n      const xBefore = M.props.rw * (ev.offsetX / M.props.shared.cw)\n      const yBefore = M.props.rh * (ev.offsetY / M.props.shared.ch)\n\n      M.init()\n\n      const xAfter = M.props.rw * (ev.offsetX / M.props.shared.cw)\n      const yAfter = M.props.rh * (ev.offsetY / M.props.shared.ch)\n\n      M.props.drawX += xAfter - xBefore\n      M.props.drawY += yAfter - yBefore\n    } else {\n      const dx = ev.deltaX / M.props.scaleMp\n      const dy = ev.deltaY / M.props.scaleMp\n\n      M.props.drawX -= dx\n      M.props.drawY -= dy\n    }\n    M.draw()\n  })\n\n  dom.canvasUi.addEventListener('mousedown', (ev) => {\n    ev.preventDefault()\n    dom.canvasUi.classList.add('grabbing')\n\n    let downX = ev.clientX\n    let downY = ev.clientY\n    let origDrawX = M.props.drawX\n    let origDrawY = M.props.drawY\n\n    const handleMove = (ev: MouseEvent) => {\n      ev.preventDefault()\n      M.props.drawX = origDrawX + (ev.clientX - downX) / M.props.scaleMp\n      M.props.drawY = origDrawY + (ev.clientY - downY) / M.props.scaleMp\n      M.draw()\n    }\n\n    const handleUp = () => {\n      dom.canvasUi.classList.remove('grabbing')\n      window.removeEventListener('mousemove', handleMove)\n      window.removeEventListener('mouseup', handleUp)\n    }\n\n    window.addEventListener('mousemove', handleMove)\n    window.addEventListener('mouseup', handleUp)\n  })\n\n  const styleProps = ['blAlign', 'fontBb', 'actualBb'] as const\n\n  styleProps.forEach((prop) => {\n    dom.lineStyle[prop].color.addEventListener('input', () => {\n      M.props.style[prop].color = dom.lineStyle[prop].color.value\n      M.draw()\n    })\n    dom.lineStyle[prop].width.addEventListener('input', () => {\n      M.props.style[prop].width = Number(dom.lineStyle[prop].width.value)\n      M.draw()\n    })\n    dom.lineStyle[prop].display.addEventListener('input', () => {\n      M.props.style[prop].display = dom.lineStyle[prop].display.checked\n      M.draw()\n    })\n  })\n}\n\nexport { addEvents }\n", "import { checkTMInterface } from './support'\nimport { Align, Baseline, Metrix } from './types'\nimport { dom } from './dom'\nimport './style.css'\nimport { addEvents } from './events'\nimport { getFonts, getFontString, te } from './utils'\nimport { updateDom } from './update-dom'\nimport { builtinFontData } from './common'\n\nconst mlOffset = 30\nconst mtOffset = 10\n\nconst ctx = dom.canvas.getContext('2d') ?? te('ctx died')\n\nconst fm = getFonts(builtinFontData)\n\nconst defFf = 'sans-serif'\nconst defFont = fm[defFf] ?? te('Default font family not found')\n\nconst M: Metrix = {\n  text: 'my honest reaction \uD83D\uDE05\uD83D\uDC4C\uD83C\uDFFD',\n  font: {\n    fs: defFont[0].postscriptName,\n    fsItalic: false,\n    fsBold: false,\n    ff: defFf,\n    size: 60,\n    lh: 80,\n    align: Align.START,\n    baseline: Baseline.ALPHABETIC,\n  },\n  props: {\n    rw: 0,\n    rh: 0,\n    drawX: 100,\n    drawY: dom.canvas.clientHeight - 100,\n    scaleMp: 1,\n    rr: window.devicePixelRatio,\n    style: {\n      blAlign: { color: '#c800c8', width: 0.5, display: true },\n      fontBb: { color: '#f00000', width: 0.5, display: true },\n      actualBb: { color: '#000000', width: 0.5, display: true },\n    },\n    shared: {\n      cw: 0,\n      ch: 0,\n      fm,\n    },\n  },\n  draw: () => {},\n  init: () => {},\n}\n\nconst init = () => {\n  const cw = ctx.canvas.clientWidth\n  const ch = ctx.canvas.clientHeight\n\n  M.props.rw = cw / M.props.scaleMp\n  M.props.rh = ch / M.props.scaleMp\n\n  ctx.canvas.width = cw * M.props.rr\n  ctx.canvas.height = ch * M.props.rr\n\n  ctx.scale(M.props.rr * M.props.scaleMp, M.props.rr * M.props.scaleMp)\n\n  M.props.shared.cw = cw\n  M.props.shared.ch = ch\n}\n\nlet af: number | null = null\n\nconst draw = () => {\n  typeof af === 'number' && cancelAnimationFrame(af)\n  af = requestAnimationFrame(drawSync)\n}\n\nconst drawSync = () => {\n  const { rw, rh } = M.props\n\n  const drawText = (line: string, dx: number, dy: number) => {\n    ctx.textAlign = M.font.align\n    ctx.textBaseline = M.font.baseline\n    ctx.font = getFontString(\n      M.font.size,\n      M.font.fs,\n      M.font.fsBold,\n      M.font.fsItalic,\n    )\n    ctx.fillText(line, dx, dy)\n  }\n\n  const drawBlAlign = (idx: number, dx: number, dy: number) => {\n    const blAlignPath = new Path2D()\n    blAlignPath.moveTo(0, dy)\n    blAlignPath.lineTo(rw, dy)\n\n    // draw idx-independent lines once\n    if (idx === 0) {\n      blAlignPath.moveTo(dx, 0)\n      blAlignPath.lineTo(dx, rh)\n    }\n\n    ctx.strokeStyle = M.props.style.blAlign.color\n    ctx.lineWidth = M.props.style.blAlign.width\n    ctx.stroke(blAlignPath)\n  }\n\n  const drawFontBb = (\n    idx: number,\n    mets: TextMetrics,\n    dx: number,\n    dy: number,\n  ) => {\n    const fPath = new Path2D()\n    fPath.moveTo(0, dy - mets.fontBoundingBoxAscent)\n    fPath.lineTo(rw, dy - mets.fontBoundingBoxAscent)\n    fPath.moveTo(0, dy + mets.fontBoundingBoxDescent)\n    fPath.lineTo(rw, dy + mets.fontBoundingBoxDescent)\n\n    ctx.strokeStyle = M.props.style.fontBb.color\n    ctx.lineWidth = M.props.style.fontBb.width\n    // ctx.setLineDash([6 / M.props.scaleMp, 3 / M.props.scaleMp])\n    ctx.stroke(fPath)\n  }\n\n  const drawActualBb = (\n    idx: number,\n    mets: TextMetrics,\n    dx: number,\n    dy: number,\n  ) => {\n    // h\n    const aPath = new Path2D()\n    aPath.moveTo(0, dy - mets.actualBoundingBoxAscent)\n    aPath.lineTo(rw, dy - mets.actualBoundingBoxAscent)\n    aPath.moveTo(0, dy + mets.actualBoundingBoxDescent)\n    aPath.lineTo(rw, dy + mets.actualBoundingBoxDescent)\n\n    // v\n    // draw idx-independent Y lines once\n    if (idx === 0) {\n      aPath.moveTo(dx - mets.actualBoundingBoxLeft, 0) // this can return negative for left-aligned text\n      aPath.lineTo(dx - mets.actualBoundingBoxLeft, rh)\n    }\n    aPath.moveTo(dx + mets.actualBoundingBoxRight, 0)\n    aPath.lineTo(dx + mets.actualBoundingBoxRight, rh)\n\n    ctx.strokeStyle = M.props.style.actualBb.color\n    ctx.lineWidth = M.props.style.actualBb.width\n    ctx.stroke(aPath)\n  }\n\n  let lastMLYTop = 0\n\n  const drawMl = (idx: number, mets: TextMetrics, dx: number, dy: number) => {\n    // measuring line\n    const m = new Path2D()\n    const totalMlOffset = mlOffset / M.props.scaleMp\n    const totalMtOffset = mtOffset / M.props.scaleMp\n\n    const horMLY =\n      (idx === 0 ? dy - mets.actualBoundingBoxAscent : lastMLYTop) -\n      totalMlOffset\n    const verMLx = dx + mets.actualBoundingBoxRight + totalMlOffset\n\n    m.moveTo(dx - mets.actualBoundingBoxLeft, horMLY)\n    m.lineTo(dx + mets.actualBoundingBoxRight, horMLY)\n    m.moveTo(verMLx, dy - mets.actualBoundingBoxAscent)\n    m.lineTo(verMLx, dy + mets.actualBoundingBoxDescent)\n\n    ctx.globalAlpha = 0.5\n    ctx.strokeStyle = M.props.style.actualBb.color\n    ctx.lineWidth = M.props.style.actualBb.width\n    ctx.stroke(m)\n    ctx.globalAlpha = 1\n\n    // measuring line text\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'bottom'\n    ctx.font = getFontString(\n      M.font.size / 2,\n      M.font.fs,\n      M.font.fsBold,\n      M.font.fsItalic,\n    )\n\n    const w = mets.actualBoundingBoxLeft + mets.actualBoundingBoxRight\n    const horX = dx - mets.actualBoundingBoxLeft + w / 2\n    const horY = horMLY - totalMtOffset\n    ctx.fillText(`${w.toFixed(1)}px`, horX, horY)\n\n    const h = mets.actualBoundingBoxAscent + mets.actualBoundingBoxDescent\n    const verX = verMLx + totalMtOffset\n    const verY = dy - mets.actualBoundingBoxAscent + h / 2\n    ctx.translate(verX, verY)\n    ctx.rotate(90 / (180 / Math.PI))\n    ctx.fillText(`${h.toFixed(1)}px`, 0, 0)\n    ctx.rotate(-90 / (180 / Math.PI))\n    ctx.translate(-verX, -verY)\n\n    // top point of text above hor line\n    lastMLYTop = horY - M.font.size / 2\n  }\n\n  ctx.clearRect(0, 0, rw, rh)\n\n  const lines = M.text.split('\\n')\n\n  lines.forEach((line, idx) => {\n    const dx = M.props.drawX\n    const dy = M.props.drawY + M.font.lh * idx\n\n    drawText(line, dx, dy)\n\n    ctx.globalAlpha = 0.5\n    const mets = ctx.measureText(line)\n    M.props.style.blAlign.display && drawBlAlign(idx, dx, dy)\n    M.props.style.fontBb.display && drawFontBb(idx, mets, dx, dy)\n    M.props.style.actualBb.display && drawActualBb(idx, mets, dx, dy)\n    ctx.globalAlpha = 1\n\n    M.props.style.actualBb.display && drawMl(idx, mets, dx, dy)\n  })\n}\n\nM.draw = draw\nM.init = init\n\naddEvents(M)\n\ninit()\ndraw()\nupdateDom(M)\n\ncheckTMInterface()\n"],
  "mappings": "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",
  "names": ["checkTMInterface", "props", "supp", "nosupp", "prop", "Align", "Baseline", "validateEnumValue", "value", "enumObj", "values", "te", "msg", "err", "getFontString", "size", "ff", "fsBold", "fsItalic", "getFonts", "fd", "fontMap", "acc", "family", "fullName", "style", "postscriptName", "fm", "k", "v", "q", "qs", "te", "dom", "builtinFontData", "getOptsFromArr", "arr", "item", "opt", "updateCanvasRes", "M", "dom", "updateTextInputStyle", "updateFf", "updateFs", "reset", "record", "te", "postscriptName", "updateDom", "addEvents", "M", "dom", "updateFs", "updateTextInputStyle", "updateLocalFonts", "fd", "getFonts", "builtinFontData", "updateFf", "data", "reason", "validateEnumValue", "Align", "Baseline", "value", "updateCanvasRes", "ev", "scaleLin", "scaleExp", "xBefore", "yBefore", "xAfter", "yAfter", "dx", "dy", "downX", "downY", "origDrawX", "origDrawY", "handleMove", "handleUp", "prop", "mlOffset", "mtOffset", "ctx", "dom", "te", "fm", "getFonts", "builtinFontData", "defFf", "defFont", "M", "init", "cw", "ch", "af", "draw", "drawSync", "rw", "rh", "drawText", "line", "dx", "dy", "getFontString", "drawBlAlign", "idx", "blAlignPath", "drawFontBb", "mets", "fPath", "drawActualBb", "aPath", "lastMLYTop", "drawMl", "m", "totalMlOffset", "totalMtOffset", "horMLY", "verMLx", "w", "horX", "horY", "h", "verX", "verY", "addEvents", "updateDom", "checkTMInterface"]
}
